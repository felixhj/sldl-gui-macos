name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*' # Trigger on tags like v1.0.0

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build on ${{ matrix.os }} (${{ matrix.arch }})
    strategy:
      matrix:
        include:
          - os: macos-13 # Ventura for x86_64
            arch: x64
            python-version: '3.9'
          - os: macos-14 # Sonoma for arm64 (Apple Silicon)
            arch: arm64
            python-version: '3.9'

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.arch }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Download and Extract slsk-batchdl
        uses: robinraju/release-downloader@v1.9
        with:
          repository: 'fiso64/slsk-batchdl'
          latest: true
          fileName: 'sldl_osx-${{ matrix.arch }}.zip'
          extract: true

      - name: Verify extracted files and set permissions
        run: |
          ls -l
          chmod +x sldl

      - name: Import Signing Certificate
        env:
          SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}
        run: |
          # Decode the certificate
          printf "%s" "${{ secrets.SIGNING_CERTIFICATE_P12 }}" | base64 --decode > certificate.p12

          # Verify the certificate and password
          echo "Verifying certificate with OpenSSL..."
          openssl pkcs12 -in certificate.p12 -noout -passin env:SIGNING_CERTIFICATE_PASSWORD
          if [ $? -ne 0 ]; then
            echo "::error::OpenSSL failed to verify the certificate with the provided password."
            exit 1
          fi
          echo "Certificate verified successfully."

          # Create and prepare the keychain
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain

          # Import the certificate into the keychain
          security import certificate.p12 -k build.keychain -P "$SIGNING_CERTIFICATE_PASSWORD" -T /usr/bin/codesign

          # Allow codesign to access the keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain

      - name: Build the application with PyInstaller
        run: |
          pyinstaller --noconfirm --windowed --name="SoulseekDownloader" \
            --add-binary="sldl:." \
            --add-data="csv_processor.py:." \
            --icon=icon.icns \
            --osx-entitlements-file="entitlements.plist" \
            --codesign-identity="SoulseekDownloader Developer" \
            soulseek_downloader.py

      - name: Create DMG
        run: |
          brew install create-dmg
          create-dmg \
            --volname "SoulseekDownloader Installer" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "SoulseekDownloader.app" 200 190 \
            --hide-extension "SoulseekDownloader.app" \
            --app-drop-link 600 185 \
            "SoulseekDownloader-${{ matrix.arch }}.dmg" \
            "dist/SoulseekDownloader.app"

      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: '*.dmg'
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up keychain
        if: always()
        run: |
          security delete-keychain build.keychain
          rm -f certificate.p12
